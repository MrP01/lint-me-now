["pyproject.toml".tool.poetry.dependencies]
pylint = {version = "*", optional = true}

["pyproject.toml".tool.poetry.extras]
lint = ["pylint"]

# pylint needs to be installed in the same venv as the project, to be more useful
# https://github.com/pre-commit/mirrors-pylint#using-pylint-with-pre-commit
[[".pre-commit-config.yaml".repos]]
repo = "local"

[[".pre-commit-config.yaml".repos.hooks]]
id = "pylint"
name = "pylint"
language = "system"
exclude = "tests/"
types = ["python"]

["pyproject.toml".tool.pylint.MASTER]
# Use multiple processes to speed up Pylint.
jobs = 1

# https://github.com/samuelcolvin/pydantic/issues/1961#issuecomment-759522422
extension-pkg-whitelist = "pydantic"

["pyproject.toml".tool.pylint.REPORTS]
# Set the output format. Available formats are text, parseable, colorized, msvs (visual studio) and html.
# You can also give a reporter class, eg mypackage.mymodule.MyReporterClass.
output-format = "colorized"

# ["pyproject.toml".tool.pylint."MESSAGES CONTROL"]
# disable = [
#   "invalid-name",
#   "missing-module-docstring",
#   "missing-class-docstring",
#   "missing-function-docstring",
#   "attribute-defined-outside-init",
#   "wildcard-import",
#   "unused-wildcard-import",
# ]

# ["pyproject.toml".tool.pylint.BASIC]
# # List of builtins function names that should not be used, separated by a comma
# bad-functions = "map,filter"
# # Good variable names which should always be accepted, separated by a comma
# good-names = "i,j,k,e,ex,Run,_,id,rv,c"

["pyproject.toml".tool.pylint.FORMAT]
# Maximum number of characters on a single line.
max-line-length = 120
# Maximum number of lines in a module
max-module-lines = 1000
# TODO: deal with empty options (strings with spaces and quotes); maybe it's a ConfigParser/ConfigUpdater thing
# String used as indentation unit. This is usually " " (4 spaces) or "\t" (1 tab).
#indent-string = "    "
# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4
